(defvar keywords (LIST 'testa 'stomaco 'addome 'collo 'occhi 'occhio 'petto 'denti 'orecchio
                        'torace 'cuore 'braccia 'mani 'gamba 'gambe 'piede 'piedi 'naso 'bocca
                        'pelvico 'pelvica 'schiena 'sangue 'polmoni 'ossa 'febbre 'nausea 
                        'vomito 'ansia 'debolezza 'raffreddore 'emicrania 'vertigini 'rossore
                        'prurito 'arrossamento 'bruciore 'bruciori 'tosse 'inappetenza 'appetito
                        'sanguinamento 'gonfiore 'linfonodo 'fiatone 'affanno 'respirare 'respiro
                        'depressione 'diarrea 'ittero 'fiato 'palpitazione 'coscienza 'sincope
                        'affaticamento 'dispnea 'scapole 'mascella 'affannato 'alitosi 'alito 'spalla
                        'spalle 'offuscata 'vista 'bulbo 'oculare 'dolori 'dolore 'lacrimazione
                        'infiammazione 'palpebre 'palpebra 'secrezione 'secrezioni 'abbagliamento 'ipersensibilita
                        'abbagliata 'nitida 'macchia 'appannata 'ammiccamento 'mancamento 'sudorazione 'capogiri
                        'dimagrimento 'inappetenza 'sovrappeso 'pancreas 'addominale 'digestione 'deficit 'forza
                        'alterazioni 'alterazione 'voce 'spasmi 'contrazioni 'contrazione 'muscolari 'muscolare 
                        'dejavu 'spasmi 'comportamento 'forte 'battito 'disturbi 'visivi 'disturbo 'visivo 'confusione 'cefalea
                        'rigidita 'sensibilita 'respirazione 'irritabilita 'cefaleo 'perdita 'equilibrio
                        'tremore 'movimenti 'olfatto 'sonno 'movimento 'crisi 'epilettiche 'epilettica 'personalita 'personalita
                        'crampi 'formicolio 'pesantezza 'gola 'starnuti 'starnutisco 'malessere 'muscoli 'irritazione 'deglutazione 
                        'freddo))
(defvar frasiCasuali (LIST '"Non ho capito i tuoi sintomi,puoi ripetere?"
                            '"Sei sicuro di essere nel posto giusto? Puoi ripetere?"
                            '"Penso che tu ti sia sbagliato, ripeti per favore."))

(defvar malattie (LIST  (LIST '"Aritmia Atriale" 'fiato 'petto 'vertigini 'debolezza 'palpitazione 
                                        'coscienza 'sincope 'dispnea 'ansia 'affaticamento)
                        (LIST '"Angia Pectoris" 'petto 'braccia 'spalle 'scapole 'collo 'mascella 'addome)
                        (LIST '"Blocco Cardiaco" 'vertigini 'coscienza 'affanno 'affannato)
                        (LIST '"Embolie polmonari" 'affanno 'petto 'tosse 'sangue 'coscienza 'affannato)
                        (LIST '"fibrillazione atriale" 'affanno 'palpitazioni 'debolezza)
                        (LIST '"Acalasia esofagea" 'rigurgito 'tosse 'bruciore 'alito 'alitosi 'ingoiare)
                        (LIST '"Colangiocarcinoma" 'peso 'addome 'diarrea 'febbre 'spalla 'ittero)
                        (LIST '"Pancreatite cronica" 'digestione 'addome 'diabete)
                        (LIST '"Poliposi del colon" 'sangue 'diarrea 'stitichezza 'stanchezza)
                        (LIST '"Ambliopia o occhio pigro" 'affaticamento 'testa 'occhi 'vista 'offuscata)
                        (LIST '"Astigmatismo" 'cefalea 'affaticamento 'lacrimazione 'bruciore 'dolori 'bulbo 'oculare 'occhi 'occhio)
                        (LIST '"Blefarite" 'infiammazione 'palpebre 'arrossamento 'rossore 'gonfiore 'prurito 'bruciore 'lacrimazione 'occhi 'occhio)
                        (LIST '"Calazio o cisti di Meibomio" 'gonfiore 'arrossamento 'rossore 'palpebra 'infiammazione 'secrezioni 'occhi 'occhio)
                        (LIST '"Cataratta" 'macchia 'annebbiamento 'vista 'abbagliamento 'ipersensibilita 'occhio 'occhi) 
                        (LIST '"Cheratocono" 'vista 'abbagliata 'nitida 'occhi 'occhio)
                        (LIST '"Congiuntivite allergica acuta" 'prurito 'gonfiore 'palpebra 'occhio 'occhi)
                        (LIST '"Foro maculare" 'offuscata 'occhi 'occhio 'macchia)
                        (LIST '"Glaucoma" 'vista 'occhi 'occhio 'dolore 'nausea 'vomito 'appannata)
                        (LIST '"Orzaiolo" 'gonfiore 'arrossamento 'rossore 'dolore 'lacrimazione 'secrezione 'occhi 'occhio)
                        (LIST '"Strabismo" 'testa 'affaticamento 'bruciore 'ammiccamento 'vertigini)
                        (LIST '"Tumori primitivi del fegato" 'stanchezza 'dolore 'addome 'spalla 'nausea 'appetito 'perdita 'peso 'febbre 'ittero)
                        (LIST '"Tumori endocrini del pancreas" 'mancamento 'sudorazione 'capogiri 'diarrea 'nausea  'vomito 'dimagrimento 'ittero 'dolore 'addome)
                        (LIST '"Tumore del fegato" 'sanguinamento 'ittero 'inappetenza 'perdita 'appetito 'dolore 'stomaco)
                        (LIST '"Tumore del Pancreas" 'sovrappeso 'obesita 'dolore 'pancreas 'addome )
                        (LIST '"Tumore dello stomaco" 'dolore 'addominale 'addome 'digestione 'nausea 'vomito 'peso 'affaticamento)
                        (LIST '"Aneurisma celebrale" 'vomito 'testa 'perdita 'coscienza)
			            (LIST '"Disatria" 'respirazione 'deficit 'forza)
                        (LIST '"Disfonia" 'alterazioni 'voce) 
                        (LIST '"Distonia" 'spasmi 'contrazioni 'muscolari 'collo 'testa 'contrazione 'muscolare)
                        (LIST '"Epilessia del lobo temporale" 'dejavu 'spasmi 'comportamento )
                        (LIST '"Fistole artero-venose durali" 'arrossamento 'rossore 'occhi 'forte 'battito 'cuore)
                        (LIST '"Idrocefalo" 'nausea 'vomito 'disturbi 'visivi 'disturbo 'visivo 'confusione 'cefalea)
                        (LIST '"Malformazione di chiari" 'testa 'rigidita 'collo 'schiena'forza 'braccia 'sensibilita 'gambe 'respirazione) 
                        (LIST '"medullobastomi" 'irritabilita 'nausea 'vomito 'cefaleo 'cefalea 'debolezza 'perdita 'equilibrio)
                        (LIST '"Morbo di Parkinson" 'tremore 'movimento 'rigidita 'movimenti 'equilibrio 'disturbi 'olfatto 'sonno 'depressione 'ansia) 
                        (LIST '"Linfomi" 'testa 'nausea 'vomito 'crisi 'epilettiche 'epilettica 'personalita 'vista) 
                        (LIST '"Arteriopatia periferica" 'crampi 'debolezza)
                        (LIST '"ischemia critica degli arti inferiori" 'dolori 'formicolio 'piede 'piedi)
                        (LIST '"Varici degli arti inferiori" 'crampi 'prurito 'gonfiore 'piedi 'piede 'pesantezza 'gambe)
                        (LIST '"incontinenza fecale" 'prurito 'diarrea 'gonfiore)
                        (LIST '"metastasi epatiche" 'stanchezza 'perdita 'peso 'nausea) 
                        (LIST '"Covid-19" 'febbre 'tosse 'dolore 'muscolare 'muscolari 'dolori 'gola 'testa 'perdita 'gusto 'olfatto
                                        'respirazione 'respirare 'petto)
                        (LIST '"Raffreddore" 'prurito 'naso 'tosse 'starnuti 'starnutisco 'respirare 'respirazione 'malessere)
                        (LIST '"Influenza" 'febbre 'tosse 'malessere 'testa 'dolori 'muscolare 'muscoli 'debolezza 'stanchezza 'freddo)
                        (LIST '"Mal di gola" 'dolore 'deglutazione 'gola 'arrossamento 'rossore 'bruciore 'irritazione 'tosse 'febbre 'gonfiore)
                        (LIST '"Bronchite" 'respirazione 'respirare 'tosse 'dolore 'polmoni 'polmonari 'respiro 'febbre 'freddo)
                        (LIST '"Pertosse" 'tosse 'arrossamento 'rossore 'febbre 'naso )
                        (LIST '"Sinusite" 'dolore 'malessere 'denti 'testa 'naso 'prurito 'tosse 'starnuti 'starnutisco 'febbre)
                        (LIST '"Rosolia" 'febbre 'malessere )
                  )
)

(defvar cause (LIST (LIST '"Angia pectoris" 50 'fumo 'sedentarieta 'diabete 'obesita 'ereditarieta)
                    (LIST '"Aritmia Atriale" 0 'femmina 'ansia 'sedentarieta 'emozione 'gravidanza 'ciclo 'fumo 'farmaci 'alcol
                                    'droghe 'diabete 'obesita 'anemia)
                    (LIST '"Blocco Cardiaco" 50 'interventi)
                    (LIST '"Embolie polmonari" 50 'fumo 'interventi 'trauma 'infezioni 'terapie)
                    (LIST '"fibrillazione atriale" 50 'maschio 'patologie)
                    (LIST '"Acalasia esofagea" 0 'ignoto)
                    (LIST '"Colangiocarcinoma" 65 'fumo 'alcol 'obesita 'diabete 'cirrosi 'epatite )
                    (LIST '"Pancreatite cronica" 0 'alcol )
                    (LIST '"Poliposi del colon" 50 'fumo 'alcol 'dieta 'obesita)
                    (LIST '"Ambliopia o occhio pigro" 8 'patologie)
                    (LIST '"Astigmatismo" 0 'ignoto)
                    (LIST '"Blefarite" 0 'ignoto)
                    (LIST '"Calazio o cisti di Meibomio" 0 'alimentazione 'patologie 'ansia)
                    (LIST '"Cataratta" 40 'calore 'ferita 'farmaci 'diabete 'fumo 'alimentazione ) 
                    (LIST '"Cheratocono" 40  'ereditarieta 'trauma 'ferita 'allergia)
                    (LIST '"Congiuntivite allergica acuta" 0 'allergia )
                    (LIST '"Foro maculare" 0 'femmina 'trauma)
                    (LIST '"Glaucoma" 40 'ereditarieta 'diabete 'interventi 'patologie 'trauma )
                    (LIST '"Orzaiolo" 10 'infezioni 'diabete )
                    (LIST '"Strabismo" 0 'patologie )
                    (LIST '"Tumori primitivi del fegato" 50  'alcol 'epatite 'diabete )
                    (LIST '"Tumori endocrini del pancreas" 55 'ignoto)
                    (LIST '"Tumore del fegato" 50 'epatite 'sovrappeso 'diabete 'fumo 'alimentazione 'ereditarieta )
                    (LIST '"Tumore del Pancreas" 60 'sovrappeso 'diabete 'fumo 'ereditarieta )
                    (LIST '"Tumore dello stomaco" 45 'alcol 'ereditarieta 'fumo 'alimentazione )
                    (LIST '"Aneurisma celebrale" '30 'femmina 'trauma )
			        (LIST '"Disatria" 0 'patologie 'infiammazione 'trauma )
                    (LIST '"Disfonia" 0 'ignoto) 
                    (LIST '"Distonia" 0 'ereditarieta )
                    (LIST '"Epilessia del lobo temporale" 0 'patologie 'ferita )
                    (LIST '"Fistole artero-venose durali" 0 'ignoto)
                    (LIST '"Idrocefalo" 70 'trauma 'infiammazione 'sangue )
                    (LIST '"Malformazione di chiari" 0 'femmina 'droghe 'alcol 'ereditarieta 'alimentazione 'gravidanza) 
                    (LIST '"medullobastomi" 2 'ereditarieta)
                    (LIST '"Morbo di Parkinson" 58 'trauma 'infezioni 'ereditarieta) 
                    (LIST '"Linfomi" 60 'ignoto ) 
                    (LIST '"Arteriopatia periferica" 50 'fumo 'diabete 'sovrappeso 'obesita)
                    (LIST '"ischemia critica degli arti inferiori" 75 'fumo 'alimentazione 'sedentarieta)
                    (LIST '"Varici degli arti inferiori" 30 'femmina 'obesita 'calore 'stitichezza)
                    (LIST '"incontinenza fecale" 0 'femmina 'stitichezza 'trauma )
                    (LIST '"metastasi epatiche" 55 'maschio ) 
                    (LIST '"Covid-19" 0 'infezioni)
                    (LIST '"Raffreddore" 0  'patologie 'infiammazione)
                    (LIST '"Influenza" 0  'patologie 'infiammazione 'calore 'trauma)
                    (LIST '"Mal di gola" 0 'patologie 'infiammazione 'infezioni 'fumo)
                    (LIST '"Bronchite" 0 'fumo 'patologie 'calore )
                    (LIST '"Pertosse" 5 'alimentazione 'infiammazione 'infezioni)
                    (LIST '"Sinusite" 20 'patologie 'allergia 'fumo 'infezioni)
                    (LIST '"Rosolia" 2 'malessere 'dolore 'dolori 'testa 'gola 'febbre)
                )
)

(defun ipocondriabot ()
    ( main )
    (cond ((string-equal "exit" ( read-line )) (princ "Arrivederla!!"))
          (T ( ipocondriabot  ) )  
    )
)

(defun main ()
    (terpri)
    (princ "Salve, sono il chatbot 'IPOCONDRIABOT', un chatbot il cui obiettivo risulta quello di capire" )
    (terpri)
    (princ "che tipo di malattia hai, dati i sintomi da te indicati e registrati in seguito.")
    (terpri)
    (terpri)
    (princ "Descriva qui il suo problema:")
    (terpri)
    (setq sintomi (LIST ))
    ( input sintomi )
    (cond ((eq sintomi nil) ( isEmpty )))

    (setq possibili_malattie ( matching malattie))

    (cond ((> (length possibili_malattie) 1)  ( main2 possibili_malattie))
          ((= (length possibili_malattie) 1) (progn (princ "Potresti avere questa malattia :  ") 
                                                (princ (car possibili_malattie) )))
          (T(progn(print "Non sembra che tu abbia sintomi relativi ad una malattia presente nel mio database.")(terpri)))
    )
    (princ "Se vuoi chiudere IPOCONDRIABOT scrivi exit.")
    (terpri)
)

(defun main2 ( L )

    (princ "Sto analizzando le possibili malattie, mi diresti quanti anni hai?")
    (terpri)
    (setq eta (controlla_eta (read-line) ))
    (setq lista_cause ( deduci_malattia L))
    (setq confronti_cause_positive ( domanda_ulteriori_informazioni lista_cause ))
    (setq risultato_malattie ( match confronti_cause_positive L cause) )
    (terpri)
    (princ "Queste sono le possibili malattie che potresti avere:")
    (terpri)
    ( stampa risultato_malattie)
    (terpri)
    (princ "Se volete avere un'altra diagnosi scrivere (main).")
    (terpri)
    (terpri)
)

(defun controlla_eta ( E )
    
    (cond ((> (length E) 3)(progn (princ "Inserisci un eta valida.") (terpri) (setq E (read-line)) (controlla_eta E )))
          (( and (< 0 (parse-integer E)) (> 110 (parse-integer E)))  E )
          (T(progn (princ "Inserisci un eta valida.") (terpri) (setq E (read-line)) (controlla_eta E )))  
    )
)

(defun stampa (risultato_malattie_finale)
    (cond ((eq risultato_malattie_finale nil) (princ "Grazie e Arrivederci."))
          ((eq (car risultato_malattie_finale) nil) ( stampa (cdr risultato_malattie_finale)))
          (T (progn (princ "*   ") (princ (car risultato_malattie_finale)) (terpri) ( stampa (cdr risultato_malattie_finale)) ))
    )
    

)

(defun match (cause_positive possible_malattie cause)

    (cond ( (eq possible_malattie nil)  nil)
          ((string-equal (car possible_malattie) (caar cause)) 
                    (append (LIST ( match_cause cause_positive (car cause) )) 
                                    ( match cause_positive (cdr possible_malattie) (cdr cause)) ))
          (T( match cause_positive possible_malattie (cdr cause)))
    )
)

(defun match_cause (lista_cause_positive  lista_malattia_e_cause)

    (setq v1 ( somma lista_cause_positive (cddr lista_malattia_e_cause)))
    (cond ((> (float (/ v1 (length (cddr lista_malattia_e_cause )))) 0.6 ) (car lista_malattia_e_cause))
          (T nil)
    )
)

(defun somma (lista1 lista2)

    (cond ((eq lista1 nil) 0)
          (( mem (car lista1) lista2) (+ 1 ( somma (cdr lista1) lista2 )))
          (T( somma (cdr lista1) lista2 ))
    )

)

(defun domanda_ulteriori_informazioni (Ca)
    (cond ((eq Ca Nil) nil)
          (( verifica_Domanda (CAR Ca))(append (LIST (CAR Ca)) (domanda_ulteriori_informazioni (cdr Ca))))
          (T( domanda_ulteriori_informazioni ( CDR Ca )))  
    )
)

(defun verifica_Domanda ( R )
    (cond ((string-equal R "fumo") ( check_fumo )) 
          ((string-equal R "sedentarieta") ( check_sedentarieta ) ) 
          ((string-equal R "diabete") ( check_diabete )  )
          ((string-equal R "obesita") ( check_obesita) )
          ((string-equal R "ereditarieta") ( check_ereditarieta ) ) 
          ((and (string-equal R "femmina") (string-equal "femmina" ( check_genere ))) 'femmina )
          ((string-equal R "emozione") ( check_emozioni ) )
          ((string-equal R "gravidanza") ( check_gravidanza ) )
          ((string-equal R "ciclo") ( check_ciclo ) )
          ((string-equal R "farmaci") ( check_farmaci) )
          ((string-equal R "alcol") ( check_alcol ) )
          ((string-equal R "droghe") ( check_droghe) )
          ((string-equal R "anemia") ( check_anemia ) )
          ((string-equal R "interventi") ( check_interventi ) )
          ((string-equal R "trauma") ( check_trauma) )
          ((string-equal R "infezioni") ( check_infezioni) )
          ((string-equal R "terapie") ( check_terapie ) )
          ((and (string-equal R "maschio") (string-equal "maschio" ( check_genere ))) 'maschio )
          ((string-equal R "patologie") ( check_patologia) )
          ((string-equal R "cirrosi") ( check_cirrosi) )
          ((string-equal R "epatite") ( check_epatite) )
          ((string-equal R "dieta") ( check_dieta) )
          ((string-equal R "calore") ( check_calore ) )
          ((string-equal R "ferita") ( check_ferita) )
          ((string-equal R "allergia") ( check_allergia ))
          ((string-equal R "sovrappeso") ( check_sovrappeso ) )
          ((string-equal R "infiammazione") ( check_infiammazione ) )
          ((string-equal R "sangue") ( check_sangue ) )
          ((string-equal R "stitichezza") ( check_stitichezza ) )
          ((string-equal R "malessere") 'malessere )
          ((string-equal R "ignoto") 'ignoto )
        )
)



(defun check_cirrosi()
 
    (terpri)
    (princ "Hai una forma di cirrosi?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no 'non 'cirrosi )))
        (cond ((and ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_cirrosi )))
            (( mem "no" corr_risp)nil)
            (( mem "si" corr_risp) 'cirrosi)
            ((and( mem "non" corr_risp) ( mem "cirrosi" corr_risp))nil)
            (( mem "cirrosi" corr_risp) 'cirrosi)
            (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_cirrosi )))
    )
 
)
 
(defun check_epatite()
 
    (terpri)
    (princ "Hai una forma di epatite?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no 'non 'epatite )))
        (cond ((and ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_epatite )))
            (( mem "no" corr_risp)nil)
            (( mem "si" corr_risp) 'epatite)
            ((and( mem "non" corr_risp) ( mem "epatite" corr_risp)) nil)
            (( mem "epatite" corr_risp) 'epatite)
            (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_epatite )))
    )

)

(defun check_patologia()
    (terpri)
    (princ"Hai patologie pregresse?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no  )))
    (cond ((and ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_patologia )))
            (( mem "no" corr_risp)nil)
            (( mem "si" corr_risp) 'patologie)
            (T 'patologie )
    )
)

(defun check_dieta()
 
    (terpri)
    (princ "Stai seguendo qualche dieta particolare ?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no 'non 'dieta )))
        (cond ((and ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_dieta )))
            (( mem "no" corr_risp)nil)
            (( mem "si" corr_risp) 'dieta)
            ((and( mem "non" corr_risp) ( mem "dieta" corr_risp)) nil)
            (( mem "dieta" corr_risp) 'dieta)
            (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_dieta )))
    )
 
)


(defun check_calore()
 
    (terpri)
    (princ "Ti senti accaldato, o sei stato a contatto con sorgenti che emettono calore ?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no 'non 'calore 'accaldato )))
        (cond ((and ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_calore )))
            (( mem "no" corr_risp)nil)
            (( mem "si" corr_risp) 'calore)
            ((and ( mem "non" corr_risp) (or ( mem "calore" corr_risp) ( mem "accaldato" corr_risp ))) nil)
            (( mem "calore" corr_risp) 'calore)
            (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_calore )))
    )
 
)



(defun check_ferita()
 
    (terpri)
    (princ "Hai una ferita ?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no 'non 'ferita )))
        (cond ((and ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_ferita )))
            (( mem "no" corr_risp)nil)
            (( mem "si" corr_risp) 'ferita)
            ((and ( mem "non" corr_risp) ( mem "allergico" corr_risp))nil)
            (( mem "ferita" corr_risp) 'ferita)
            (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_ferita )))
    )
 
)


(defun check_allergia()
 
    (terpri)
    (princ "Hai delle allergie verificate?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no 'non 'allergico )))
        (cond ((and ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_allergia )))
            (( mem "no" corr_risp)nil)
            (( mem "si" corr_risp) 'allergia)
            ((and ( mem "non" corr_risp) ( mem "allergico" corr_risp))nil)
            (( mem "allergico" corr_risp) 'allergia)
            (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_allergia )))
    )
 
)

(defun check_terapie ()

    (terpri)
    (princ "Sei stato sottoposto a terapie ormonali?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no 'non )))
    (cond ((and ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_infezioni )))
            (( mem "no" corr_risp)nil)
            (( mem "si" corr_risp) 'terapie)
            (( mem "non" corr_risp) nil)
            (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_infezioni )))
    )

)

(defun check_infezioni()

    (terpri)
    (princ "Potresti avere un'infezione in corso, hai avuto infezioni in passato?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no 'non 'infezione 'infezioni )))
    (cond ((and ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_infezioni )))
            (( mem "no" corr_risp)nil)
            (( mem "si" corr_risp) 'infezioni)
            ((and( mem "non" corr_risp) (or ( mem "infezione" corr_risp) (mem "infezioni" corr_risp)))nil)
            (( mem "infezione" corr_risp) 'infezioni)
            (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_infezioni )))
    )

)

(defun check_sovrappeso()

    (terpri)
    (princ "Mi diresti quanto sei alto in centimetri?")
    (terpri)
    (setq altezza (parse-integer (read-line)))
    (princ "Mi diresti quanto pesi in chilogrammi?")
    (terpri)
    (setq peso (parse-integer (read-line)))
    (setq altezza1 (/ altezza 100))
    (setq val (/ peso (* altezza1 altezza1) ))
    (cond ((and (<  val 30 ) (> val 25)) 'sovrappeso)
          (T nil)
    )

)

(defun check_infiammazione()
 
    (terpri)
    (princ "Hai un infiammazione particolare?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no 'non 'infiammazione )))
    (cond ((and ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_infiammazione )))
            (( mem "no" corr_risp)nil)
            (( mem "si" corr_risp) 'infiammazione)
            ((and( mem "non" corr_risp) ( mem "infiammazione" corr_risp))nil)
            (( mem "infiammazione" corr_risp) 'infiammazione)
            (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_infiammazione )))
    )
 
)


(defun check_sangue()
 
    (terpri)
    (princ "Hai qualche ferita,o sanguini da qualche parte del corpo?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no 'non 'sanguino 'sangue )))
    (cond ((and ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_sangue )))
            (( mem "no" corr_risp)nil)
            (( mem "si" corr_risp) 'sangue)
            ((and( mem "non" corr_risp) (or ( mem "sanguino" corr_risp) ( mem "sangue" corr_risp)))nil)
            (( mem "sanguino" corr_risp) 'sangue)
            (( mem "sangue" corr_risp) 'sangue)
            (( mem "non" corr_risp) nil)
            (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_sangue )))
    )
)

(defun check_stitichezza()
 
    (terpri)
    (princ "Soffri di stitichezza?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no 'stitico 'non )))
    (cond ((and ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_stitichezza )))
            (( mem "no" corr_risp)nil)
            (( mem "si" corr_risp) 'stitichezza)
            ((and ( mem "non" corr_risp) ( mem "stitico" corr_risp))nil)
            (( mem "stitico" corr_risp) 'stitichezza)   
            (( mem "non" corr_risp) nil)
    (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_stitichezza )))
    )
)

(defun check_trauma()

    (terpri)
    (princ "Hai subito traumi o lesioni di recente?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no 'non 'lesioni 'lesione 'trauma 'traumi)))
    (cond ((and  ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_trauma )))
          (( mem "no" corr_risp)nil)
          (( mem "si" corr_risp) 'trauma)
          ((and ( mem "non" corr_risp) (or ( mem "lesione" corr_risp) ( mem "lesioni" corr_risp)
                                            ( mem "trauma" corr_risp) ( mem "traumi" corr_risp)))nil)
          ((or ( mem "lesione" corr_risp) ( mem "lesioni" corr_risp)
                ( mem "trauma" corr_risp) ( mem "traumi" corr_risp)) 'trauma)
          (( mem "non" corr_risp) nil)
          (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_trauma )))
    )

)

(defun check_interventi()

    (terpri)
    (princ "Sei stato sottoposto ad interventi chirurgici di recente?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no)))
    (cond ((and  ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_interventi )))
          (( mem "no" corr_risp)nil)
          (( mem "si" corr_risp) 'interventi)
          (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_interventi )))
    )

)

(defun check_anemia ()
    
    (terpri)
    (princ "Soffri di anemia mediterranea?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no)))
    (cond ((and  ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_anemia )))
          (( mem "no" corr_risp)nil)
          (( mem "si" corr_risp) 'anemia)
          (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_anemia )))
    )

)

(defun check_droghe()

    (terpri)
    (princ "Fai uso di sostanze stupefacenti?")
    (terpri)
    (setq risp (read-line))
    (princ "Sei sicuro?")
    (terpri)
    (setq risp1 (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no 'non 'uso)))
    (cond ((and  ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_droghe )))
          (( mem "no" corr_risp)nil)
          (( mem "si" corr_risp) 'droghe)
          ((and ( mem "non" corr_risp) ( mem "uso" corr_risp))nil)
          (( mem "uso" corr_risp) 'droghe)
          (( mem "non" corr_risp) nil)
          (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_droghe )))
    )

)

(defun check_alcol()

    (terpri)
    (princ "Ti capita di bere alcol molto frequentemente?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no 'astemio 'non 'bevo)))
    (cond ((and  ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_alcol )))
          (( mem "no" corr_risp)nil)
          (( mem "si" corr_risp) 'alcol)
          ((and ( mem "non" corr_risp) ( mem "bevo" corr_risp))nil)
          (( mem "bevo" corr_risp) 'alcol)
          ((and ( mem "non" corr_risp) ( mem "astemio" corr_risp)) 'alcol)
          (( mem "astemio" corr_risp) nil)
          (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_alcol )))
    )

)

(defun check_farmaci()

    (terpri)
    (princ "Per caso assumi farmaci?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no 'assumo 'non)))
    (cond ((and  ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_farmaci )))
          (( mem "no" corr_risp)nil)
          (( mem "si" corr_risp) 'farmaci)
          ((and ( mem "non" corr_risp) ( mem "assumo" corr_risp))nil)
          (( mem "assumo" corr_risp) 'farmaci)
          (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_farmaci )))
    )

)

(defun check_ciclo()

    (cond (( check_gravidanza )nil)
          (T( check_ciclodonna ))
    )

)

(defun check_ciclodonna ()
    (terpri)
    (princ "Hai il ciclo ?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no 'non 'ciclo)))
    (cond (( mem "si" corr_risp) 'ciclo)
          (( mem "no" corr_risp) nil)
          ((and ( mem "non" corr_risp) ( mem "ciclo" corr_risp))nil)
          (( mem "ciclo" corr_risp) 'ciclo)
          (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_ciclodonna )))
    )
)

(defun check_gravidanza ()

    (cond ((string-equal genere "maschio")nil)
          (T( check_donna ))
    )
)

(defun check_donna ()
    (terpri)
    (princ "Sei in dolce attesa ?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no)))
    (cond (( mem "si" corr_risp) 'gravidanza)
          (( mem "no" corr_risp) nil)
          (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_donna )))
    )
)

(defun check_emozioni()

    (terpri)
    (princ "Hai avuto un'emozione forte di recente?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no )))
    (cond ((and  ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_emozioni )))
          (( mem "si" corr_risp) 'emozione)
          (( mem "no" corr_risp) nil)
          (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_emozioni )))
    )

)


(defun check_genere()

    (terpri)
    (princ "Sei un maschio o una femmina?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'maschio 'femmina 'non)))
    (cond ((and  ( mem "maschio" corr_risp) (mem "femmina" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_genere )))
          (( mem "maschio" corr_risp) (defvar genere 'maschio))
          (( mem "femmina" corr_risp) (defvar genere 'femmina))
          ((and  ( mem "non" corr_risp)  ( mem "femmina" corr_risp)) (defvar genere 'maschio))
          ((and  ( mem "non" corr_risp)  ( mem "maschio" corr_risp)) (defvar genere 'femmina))
          (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_genere )))
    )

)

(defun check_fumo()

    (terpri)
    (princ "Sei un fumatore?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no 'fumo 'non)))
    (cond ((and  ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_fumo )))
          (( mem "no" corr_risp)nil)
          (( mem "si" corr_risp) 'fumo)
          ((and ( mem "non" corr_risp) ( mem "fumo" corr_risp))nil)
          (( mem "fumo" corr_risp) 'fumo)
          (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_fumo )))
    )

)

(defun check_sedentarieta()

    (terpri)
    (princ "Ti consideri una persona sedentaria?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no 'sedentario 'faccio 'non )))
    (cond ((and  ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_sedentarieta )))
          (( mem "no" corr_risp)nil)
          (( mem "si" corr_risp) 'sedentarieta)
          ((and ( mem "non" corr_risp) ( mem "faccio" corr_risp))nil)
          (( mem "faccio" corr_risp) 'sedentarieta)
          ((and ( mem "non" corr_risp) ( mem "sedentario" corr_risp))nil)
          (( mem "sedentario" corr_risp) 'sedentarieta)
          (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_sedentarieta )))
    )
)

(defun check_diabete()

    (terpri)
    (princ "Hai il diabete?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no 'diabete 'non )))
    (cond ((and  ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_diabete )))
          (( mem "no" corr_risp)nil)
          (( mem "si" corr_risp) 'diabete)
          ((and ( mem "non" corr_risp) ( mem "diabete" corr_risp))nil)
          (( mem "diabete" corr_risp) 'diabete)
          (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_diabete )))
    )

)

(defun check_obesita()

    (terpri)
    (princ "Mi diresti quanto sei alto in centimetri?")
    (terpri)
    (setq altezza (read-line))
    (setq altezza (controlla_altezza altezza ))
    (princ "Mi diresti quanto pesi in chilogrammi?")
    (terpri)
    (setq peso (read-line))
    (setq peso (controlla_peso peso ))
    (setq altezza1 (/ altezza 100))
    (setq val (/ peso (* altezza1 altezza1) ))
    (cond ((>=  val 30 ) 'obesita)
          (T nil)
    )

)
(defun controlla_peso ( E )
    (cond ((> (length E) 3)(progn (princ "Inserisci un peso valida.") (terpri) (setq E (read-line)) (controlla_peso E )))
          (( and (< 2 (parse-integer E)) (> 600 (parse-integer E))) (parse-integer E) )
          (T(progn (princ "Inserisci un eta valida.") (terpri) (setq E (read-line)) (controlla_peso E )))  
    )
)
(defun controlla_altezza ( E )
    (cond ((> (length E) 3)(progn (princ "Inserisci un'altezza valida.") (terpri) (setq E (read-line)) (controlla_altezza E )))
          (( and (< 15 (parse-integer E)) (> 250 (parse-integer E))) (parse-integer E) )
          (T(progn (princ "Inserisci un'altezza valida.") (terpri) (setq E (read-line)) (controlla_altezza E )))  
    )
)

(defun check_ereditarieta()

    (terpri)
    (princ "Qualcuno della tua famiglia ha avuto problemi simili ai tuoi?")
    (terpri)
    (setq risp (read-line))
    (setq list_risp ( preprocessing risp))
    (setq corr_risp ( controlla-membri list_risp (LIST 'si 'no 'forse 'non 'mio 'mia)))
    (cond ((and  ( mem "si" corr_risp) (mem "no" corr_risp)) 
                (progn (princ "Non ho capito, ti ripetero la domanda") ( check_ereditarieta )))
          (( mem "no" corr_risp)nil)
          (( mem "si" corr_risp) 'ereditarieta)
          (( mem "forse" corr_risp) nil)
          (( mem "non" corr_risp) nil)
          ((or ( mem "mio" corr_risp) ( mem "mia" corr_risp)) 'ereditarieta)
          (T(progn (princ "Non ho capito, ti ripetero la domanda") ( check_ereditarieta )))
    )

)

(defun deduci_malattia ( L )

    (remove-duplicates ( possibili_cause L cause))

)

(defun possibili_cause (L X)

    (cond ((eq L nil) nil)
          (T(append (controlla_cause (car L) X) ( possibili_cause (cdr L) X)))
    )

)

(defun controlla_cause ( L X)

    (cond ((eq X nil)nil)
          ((and (string-equal L (caar X)) (chiedi (cadar X))) (cddar X) )
          (T( controlla_cause L (cdr X)))  
    )

)
(defun chiedi (n)
    (cond ((< n (parse-integer eta)) T)
          (T nil)
    )
)
 
(defun matching(L)

    (cond ((eq L nil) nil)  
        (( controlla-membri sintomi (car L)) (append (LIST (caar L)) ( matching (cdr L) )))
        (T( matching (cdr L)))
    )
)

(defun isEmpty ()
    
    (print ( getFrase (random 3) 0 frasiCasuali ))
    (terpri)
    ( input sintomi)
    (terpri)                                  
    (cond ((eq sintomi nil) ( isEmpty ))
    )
)

(defun getFrase (n p L)
    (cond ((= n p)(car L))
    (T (getFrase n (+ p 1) (cdr L) ))
    )
)

(defun input( L )
    (setq fraseUtente (read-line))
    (setq lista ( preprocessing fraseUtente))
    (setq sintomi ( controlla-membri lista keywords))
)

(defun mem ( X L )
    (cond ((eq L nil) nil)
          ((string-equal X (car L)) X)
          (T(mem X (cdr L)))
    )
)

(defun controlla-membri ( L K)
    
    (cond ((eq L nil) nil)
          ((mem (car L) K) (append (LIST (car L))  ( controlla-membri (cdr L) K)))
          (T( controlla-membri (cdr L) K))
    )
)

(defun preprocessing (str)
    (setq lista ( split-str str ))
    (setq lista ( split lista "."))
    (setq lista ( split lista ";"))
    (setq lista ( split lista ","))
    (setq lista ( split lista "!"))
    (setq lista ( split lista "?"))
)

(defun split (L del)
    (cond ((eq L nil) nil)
    (T(append ( split-str (car L) del) ( split (cdr L ) del ))))

)

(defun split-str (string &optional (separator " "))
  (split-1 string separator))

(defun split-1 (string &optional (separator " ") (r nil))
  (let ((n (position separator string
             :from-end t
             :test #'(lambda (x y)
                   (find y x :test #'string=)))))
    (if n
    (split-1 (subseq string 0 n) separator (cons (subseq string (1+ n)) r))
      (cons string r))
  )
)


